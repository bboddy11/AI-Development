import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class RecommendationSystem:
    def __init__(self, ratings_df: pd.DataFrame):
        self.ratings_df = ratings_df.copy()
        self.user_item_matrix = None
        self.similarity_matrix = None
        self._prepare_data()

    def _prepare_data(self):
        logging.info("–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á-—Ç–æ–≤–∞—Ä...")
        self.user_item_matrix = self.ratings_df.pivot_table(
            index='User', columns='Item', values='Rating'
        ).fillna(0)

        logging.info("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ...")
        similarity = cosine_similarity(self.user_item_matrix)
        self.similarity_matrix = pd.DataFrame(
            similarity,
            index=self.user_item_matrix.index,
            columns=self.user_item_matrix.index
        )
        logging.info("–ú–∞—Ç—Ä–∏—Ü—è —Å—Ö–æ–∂–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞.")

    def recommend(self, target_user: str, top_n: int = 3):
        if target_user not in self.similarity_matrix.index:
            logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á '{target_user}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ.")
            return pd.Series()

        logging.info(f"–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{target_user}'...")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–æ–∂–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        similar_users = self.similarity_matrix[target_user].drop(index=target_user)
        similar_users = similar_users[similar_users > 0].sort_values(ascending=False)

        # –ó–≤–∞–∂–µ–Ω–µ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
        weighted_scores = pd.Series(dtype=np.float64)
        for user, similarity in similar_users.items():
            weighted_scores = weighted_scores.add(
                self.user_item_matrix.loc[user] * similarity, fill_value=0
            )

        # –í–∏–ª—É—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –≤–∂–µ –±—É–ª–∏ –æ—Ü—ñ–Ω–µ–Ω—ñ —Ü—ñ–ª—å–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        seen_items = self.user_item_matrix.loc[target_user]
        seen_items = seen_items[seen_items > 0].index
        recommendations = weighted_scores.drop(index=seen_items, errors='ignore')

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–ø-N
        recommendations = recommendations.sort_values(ascending=False).head(top_n)
        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.")

        return recommendations

    def show_similarity_matrix(self):
        print("\n–ú–∞—Ç—Ä–∏—Ü—è —Å—Ö–æ–∂–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        print(self.similarity_matrix.round(2).to_string())


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö
data = {
    'User': ['User1', 'User1', 'User1', 'User2', 'User2', 'User3', 'User3', 'User4', 'User4', 'User5'],
    'Item': ['Item1', 'Item2', 'Item3', 'Item1', 'Item3', 'Item2', 'Item4', 'Item1', 'Item4', 'Item3'],
    'Rating': [5, 3, 2, 4, 5, 4, 4, 2, 5, 4]
}
df_ratings = pd.DataFrame(data)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
recommender = RecommendationSystem(df_ratings)
recommender.show_similarity_matrix()

user_to_recommend = "User1"
recommendations = recommender.recommend(user_to_recommend, top_n=3)

print(f"\nüìå –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è {user_to_recommend}:\n")
if not recommendations.empty:
    for item, score in recommendations.items():
        print(f"üõí {item}: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–∏–π –±–∞–ª = {score:.2f}")
else:
    print("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.")
