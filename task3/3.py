import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df = pd.read_csv('housing.csv')


# 2. –ü–µ—Ä–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
print("üîç –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ:")
print(df.info())
print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(df.describe())
print("\nüßæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:")
print(df.isnull().sum())

# 3. –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å (—Å–µ—Ä–µ–¥–Ω—î –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö, "Unknown" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö)
for col in df.select_dtypes(include=['float64', 'int64']).columns:
    df[col].fillna(df[col].mean(), inplace=True)

for col in df.select_dtypes(include=['object']).columns:
    df[col].fillna("Unknown", inplace=True)

# 4. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–∑–Ω–∞–∫ —ñ —Ü—ñ–ª—ñ
X = df.drop('price', axis=1)
y = df['price']

# 5. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∑–º—ñ–Ω–Ω–∏—Ö
numeric_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_features = X.select_dtypes(include=['object', 'category']).columns.tolist()

# 6. –ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–æ—Ä–∞
numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(drop='first', handle_unknown='ignore')

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ]
)

# 7. –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ
model = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('regressor', LinearRegression())
])

# 8. –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

# 9. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
model.fit(X_train, y_train)

# 10. –ü—Ä–æ–≥–Ω–æ–∑
y_pred = model.predict(X_test)

# 11. –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ
print("\nüìà –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ:")
print(f"MAE: {mean_absolute_error(y_test, y_pred):.2f}")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R¬≤:  {r2_score(y_test, y_pred):.2f}")

# 12. –í–∏–≤—ñ–¥ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤ –æ–∑–Ω–∞–∫ –ø—ñ—Å–ª—è one-hot –∫–æ–¥—É–≤–∞–Ω–Ω—è
feature_names = numeric_features + \
    list(model.named_steps['preprocessing'].transformers_[1][1].get_feature_names_out(categorical_features))
coefficients = model.named_steps['regressor'].coef_

importance_df = pd.DataFrame({
    '–û–∑–Ω–∞–∫–∞': feature_names,
    '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç': coefficients
}).sort_values(by='–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç', key=abs, ascending=False)

print("\nüìå –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫:")
print(importance_df)

# 13. –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ
plt.figure(figsize=(10, 6))
sns.barplot(x='–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç', y='–û–∑–Ω–∞–∫–∞', data=importance_df)
plt.title("–í–ø–ª–∏–≤ –æ–∑–Ω–∞–∫ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω–∏")
plt.tight_layout()
plt.show()
